Notes
=====

This is one of the design documents for ffmake and a place to 
put down thoughts on what is going into these types of files and
to lay out the ground rules for each platform.

Why?
----

Why do I want to go through the hassle of creating Yet Another
Build System?

A few thoughts:

* Gyp (Generate Your Projects) seems to be a Turing-complete
  data structure, which no one fully understands, and which 
  isn't particularly well documented. Google doesn't appear
  to want to shed light on this, and so far only 3 major projects
  use this thing: Node.js, Chrome, and WebRTC.
  
  Admittedly its ability to handle these things is respectable.
  But it's got a hell of a steep learning curve for anyone else.
  
  Try adding a link to a pre-built system static library. 
  I tried it once. Good luck with that. You just have to build it
  yourself, and define the gyp rule to do it.
  
* SCons is good, but it doesn't generate native project files,
  so you get to do all your work at the command line. It's
  very powerful, and it's Python, which is great, but
  it leaves something to be desired. Since it doesn't generate
  project files, you don't get the benefits of coding with a 
  modern IDE.
  
  And good luck interactively debugging with it!
  
* CMake is also nice, but it has some wonky build language, 
  odd behavior whenever you try to use one of the Find* scripts,
  and the C codebase feels pretty creaky. It reminds me of the
  scripting language I once wrote to run a JTAG debugger, before
  I learned about Python. It's better 
  than the above two, since it does generate usable development-
  environment solution and project files. But that build language
  and the inevitable black box of debugging the CMakeLists.txt
  file leaves a lot to be desired.
  
  CMake also adds odd settings of its own to the generated 
  project files. It defaults to the MultiByte Character Set on 
  Windows, it defines a reserved stack size of 10 million bytes,
  for whatever reason, it puts weird settings in the projects,
  which aren't there by default. It just feels crufty.

* None of these systems have an easy way of importing and 
  generating premade build recipes. ffmake is shooting for 
  enough parameter-injected design to make it easy to import
  and create dependencies on other ffmakefiles, with project
  generation become just another one-liner.

How is ffmake different?
------------------------
  
In this case, ffmake takes a different approach. It doesn't
attempt to understand all of the settings a build system offers.
It doesn't attempt to map too much in the way of an internal 
model into a generator. What it does attempt to map are the most
major settings, and leave the minor crap up to you.

How does it do this?
--------------------

It uses Mustache templates, derived from native development
environment files, and just fills in the major bits.

Minor settings? Well, you'll have to edit the templates for those.

If you spot an area where the common templates shipped with 
ffmake could be improved, send feedback so it can be incorporated.

Microsoft Visual Studio 2012 Express Solution and Project files
---------------------------------------------------------------

I make ffmake templates by looking at Solution and Project files 
generated by the native development environment, and try to 
figure out what settings change between target types.

Using a 3-way diff, you can see what needs to be templatized,
and what stays the same among all of the project files.

![3-way diff](3-way-project-diff.png)

Simplifications to keep you / me sane
-------------------------------------

Rather than make it possible to decide if you want a 32-bit build
or a 64-bit built, ffmake always generates both. Screw configurability
on that point.

For example, in Visual Studio Project files, there's a block like this
in all of the Project files:

    <ItemGroup Label="ProjectConfigurations">
    <ProjectConfiguration Include="Debug|Win32">
      <Configuration>Debug</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Debug|x64">
      <Configuration>Debug</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|Win32">
      <Configuration>Release</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|x64">
      <Configuration>Release</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    </ItemGroup>
    
Then, in the Visual Studio Solution files, there are repeated blocks like 
these:

    {5FAF062B-A3C2-4E4F-856C-3774900EF63C}.Debug|Win32.ActiveCfg = Debug|Win32
    {5FAF062B-A3C2-4E4F-856C-3774900EF63C}.Debug|Win32.Build.0 = Debug|Win32
    {5FAF062B-A3C2-4E4F-856C-3774900EF63C}.Debug|x64.ActiveCfg = Debug|x64
    {5FAF062B-A3C2-4E4F-856C-3774900EF63C}.Debug|x64.Build.0 = Debug|x64
    {5FAF062B-A3C2-4E4F-856C-3774900EF63C}.Release|Win32.ActiveCfg = Release|Win32
    {5FAF062B-A3C2-4E4F-856C-3774900EF63C}.Release|Win32.Build.0 = Release|Win32
    {5FAF062B-A3C2-4E4F-856C-3774900EF63C}.Release|x64.ActiveCfg = Release|x64
    {5FAF062B-A3C2-4E4F-856C-3774900EF63C}.Release|x64.Build.0 = Release|x64

We could make this complicated and create more Configurations,
but why would we do that?

The Configuration and Platform fields can be set on the msbuild
command line like so:


Also, we don't do any kind of trickery with the "x64" Platform, 
like calling it "Win64" or something like that. It *has* to be "x64", 
because when you run the Visual Studio x64 
Cross Tools Command Prompt, it sets an environment variable called
"Platform" to "x64". msbuild pulls this variable by default and builds
the correct Platform target accordingly:

![](vs2012-x64-cross-tools-command-prompt.png)

Build Type
----------

In the Visual Studio project files, there are three values for
the <ConfigurationType> setting:

StaticLibrary, DynamicLibrary, Application

In the Python Project object, you set the "configuration_type"
property to one of "static", "shared", "executable" to set this,
the object will translate this to the platform-specific value.

(TODO: Android.mk uses things like $(BUILD_SHARED_OBJECT), etc.)

Link / SubSystem
----------------

Whether or not the Application is a Windows application or a 
console application depends on the Link/SubSystem setting,
which is one of:

Console, Windows

Tag: windows_link_subsystem

This is a Windows-project specific setting, hence the windows_
prefix.

Tags
----

Some of these will be made common between platforms, but until
we know which ones they are, we make them platform-specific.

+--------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                  **Windows-Specific Tags and Default Settings**                                                  |
+------------------------------+------------------+------------------------------------------------------------------------------------------------+
|                              |                  |                                        **Build Types**                                         |
+------------------------------+------------------+--------------------+-------------------------+------------------------+------------------------+
|           **Tag**            | **Python Type**  |   StaticLibrary    |     DynamicLibrary      | Application (Console)  | Application (Windows)  |
+------------------------------+------------------+--------------------+-------------------------+------------------------+------------------------+
| windows_project_guid         | uuid.UUID        | Autogenerated, like: {4C1C3931-C231-4BA6-802C-15C5901A5A54}                                    |
+------------------------------+------------------+------------------------------------------------------------------------------------------------+
| windows_root_namespace       | String           | This is the unique project name.                                                               |
+------------------------------+------------------+--------------------+-------------------------+------------------------+------------------------+
| windows_configuration_type   | String           | "StaticLibrary"    | "DynamicLibrary"        | "Application"          | "Application"          |
+------------------------------+------------------+--------------------+-------------------------+------------------------+------------------------+
| windows_link_subsystem       | String           | "Windows"          | "Windows"               | "Console"              | "Windows"              |
+------------------------------+------------------+--------------------+-------------------------+------------------------+------------------------+
| windows_incremental_link     | Boolean          | False              | True                    | True                   | True                   |
+------------------------------+------------------+--------------------+-------------------------+------------------------+------------------------+
|                              |                  |                    |                         |                        |                        |
+------------------------------+------------------+--------------------+-------------------------+------------------------+------------------------+
|                              |                  |                    |                         |                        |                        |
+------------------------------+------------------+--------------------+-------------------------+------------------------+------------------------+
|                                                                   Common Tags                                                                    |
+------------------------------+------------------+--------------------+-------------------------+------------------------+------------------------+
| include_dirs                 |                  |                    |                         |                        |                        |
+------------------------------+                  +--------------------+-------------------------+------------------------+------------------------+
| include_dirs_shared          |                  |                    |                         |                        |                        |
+------------------------------+                  +--------------------+-------------------------+------------------------+------------------------+
| include_dirs_static          |                  |                    |                         |                        |                        |
+------------------------------+                  +--------------------+-------------------------+------------------------+------------------------+
| include_dirs_debug           | List of Strings  |                    |                         |                        |                        |
+------------------------------+                  +--------------------+-------------------------+------------------------+------------------------+
| include_dirs_release         |                  |                    |                         |                        |                        |
+------------------------------+                  +--------------------+-------------------------+------------------------+------------------------+
| include_dirs_32bit           |                  |                    |                         |                        |                        |
+------------------------------+                  +--------------------+-------------------------+------------------------+------------------------+
| include_dirs_64bit           |                  |                    |                         |                        |                        |
+------------------------------+------------------+--------------------+-------------------------+------------------------+------------------------+
|                                                                                                                                                  |
+------------------------------+------------------+--------------------+-------------------------+------------------------+------------------------+
| preprocessor_defs            |                  | ["_LIB"]           | ["_WINDOWS", "_USRDLL"] | ["_CONSOLE"]           | ["_WINDOWS"]           |
+------------------------------+                  +--------------------+-------------------------+------------------------+------------------------+
| preprocessor_defs_shared     |                  |                    | ["DLLAPIEXPORT"]        |                        |                        |
|                              |                  |                    | (for example)           |                        |                        |
+------------------------------+                  +--------------------+-------------------------+------------------------+------------------------+
| preprocessor_defs_static     |                  |                    |                         |                        |                        |
+------------------------------+                  +--------------------+-------------------------+------------------------+------------------------+
| preprocessor_defs_debug      | List of Strings  |                    |                         |                        |                        |
+------------------------------+                  +--------------------+-------------------------+------------------------+------------------------+
| preprocessor_defs_release    |                  |                    |                         |                        |                        |
+------------------------------+                  +--------------------+-------------------------+------------------------+------------------------+
| preprocessor_defs_32bit      |                  |                    |                         |                        |                        |
+------------------------------+                  +--------------------+-------------------------+------------------------+------------------------+
| preprocessor_defs_64bit      |                  |                    |                         |                        |                        |
+------------------------------+------------------+--------------------+-------------------------+------------------------+------------------------+






    preprocessor_defs_shared   (String)
                                DynamicLibrary:         , for example
    

    precompiled_header         (Dictionary, single entry { 'filename': 'source.pch' })
    
    

Instantiating a WindowsProject object
-------------------------------------

    wp = WindowsProject(name="ProjectName", build_type="static_library", source_dir="", source_files=[])
    wp.render(stdout=True)

source_dir specifies the base directory against which all 
source_files can be specified relatively.

So let's say you have:

    project/src/A.cpp
    project/src/B.cpp
    project/src/C.cpp

